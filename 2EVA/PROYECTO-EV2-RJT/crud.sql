-- MySQL Script generated by MySQL Workbench
-- Mon Jan  8 21:13:38 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `dbRoberto` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `dbRoberto` DEFAULT CHARACTER SET utf8 ;
USE `dbRoberto` ;

-- -----------------------------------------------------
-- Table `mydb`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dbRoberto`.`users` ;

CREATE TABLE IF NOT EXISTS `dbRoberto`.`users` (
  `id_user` INT NOT NULL AUTO_INCREMENT,
  `name_user` VARCHAR(45) NOT NULL,
  `username_user` VARCHAR(45) NOT NULL,
  `password_user` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_user`),
  UNIQUE INDEX `id_UNIQUE` (`id_user` ASC) VISIBLE,
  UNIQUE INDEX `username_user_UNIQUE` (`username_user` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`special_users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dbRoberto`.`special_users` ;

CREATE TABLE IF NOT EXISTS `dbRoberto`.`special_users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `special_users_users` INT NOT NULL,
  PRIMARY KEY (`id`, `special_users_users`),
  INDEX `fk_special_users_users1_idx` (`special_users_users` ASC) VISIBLE,
  CONSTRAINT `fk_special_users_users1`
    FOREIGN KEY (`special_users_users`)
    REFERENCES `dbRoberto`.`users` (`id_user`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`brands`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dbRoberto`.`brands` ;

CREATE TABLE IF NOT EXISTS `dbRoberto`.`brands` (
  `id_brand` INT NOT NULL AUTO_INCREMENT,
  `brand_brand` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_brand`),
  UNIQUE INDEX `brand_UNIQUE` (`brand_brand` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`cpu`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dbRoberto`.`cpu` ;

CREATE TABLE IF NOT EXISTS `dbRoberto`.`cpu` (
  `id_cpu` INT NOT NULL AUTO_INCREMENT,
  `name_cpu` VARCHAR(45) NOT NULL,
  `nanometers_cpu` INT UNSIGNED NOT NULL,
  `graphicsrender_cpu` VARCHAR(45) NOT NULL,
  `manufacturer_cpu` VARCHAR(45) NOT NULL,
  `cores_cpu` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_cpu`),
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`phones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dbRoberto`.`phones` ;

CREATE TABLE IF NOT EXISTS `dbRoberto`.`phones` (
  `id_phone` INT NOT NULL AUTO_INCREMENT,
  `model_phone` VARCHAR(45) NOT NULL,
  `screen_phone` FLOAT NOT NULL,
  `ram_phone` INT NOT NULL,
  `battery_phone` INT NOT NULL,
  `brand_phone_brand` INT NOT NULL,
  `cpu_phone_cpu` INT NOT NULL,
  `operatingsystem_phones` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_phone`, `brand_phone_brand`, `cpu_phone_cpu`),
  INDEX `fk_phones_brands_idx` (`brand_phone_brand` ASC) VISIBLE,
  INDEX `fk_phones_cpu1_idx` (`cpu_phone_cpu` ASC) VISIBLE,
  CONSTRAINT `fk_phones_brands`
    FOREIGN KEY (`brand_phone_brand`)
    REFERENCES `dbRoberto`.`brands` (`id_brand`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `fk_phones_cpu`
    FOREIGN KEY (`cpu_phone_cpu`)
    REFERENCES `dbRoberto`.`cpu` (`id_cpu`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`storages`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dbRoberto`.`storages` ;

CREATE TABLE IF NOT EXISTS `dbRoberto`.`storages` (
  `storage_storage` INT NOT NULL,
  PRIMARY KEY (`storage_storage`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`phones_storage`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dbRoberto`.`phones_storage` ;

CREATE TABLE IF NOT EXISTS `dbRoberto`.`phones_storage` (
  `id_phone` INT NOT NULL,
  `storage_storage` INT NOT NULL,
  PRIMARY KEY (`id_phone`, `storage_storage`),
  INDEX `fk_phones_has_storage_storage1_idx` (`storage_storage` ASC) VISIBLE,
  INDEX `fk_phones_has_storage_phones1_idx` (`id_phone` ASC) VISIBLE,
  CONSTRAINT `fk_phones_has_storage_phones1`
    FOREIGN KEY (`id_phone`)
    REFERENCES `dbRoberto`.`phones` (`id_phone`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `fk_phones_has_storage_storage1`
    FOREIGN KEY (`storage_storage`)
    REFERENCES `dbRoberto`.`storages` (`storage_storage`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;




-- Insertar 10 usuarios de ejemplo sin especificar el id_user (se autoincrementará)
INSERT INTO `dbRoberto`.`users` (`name_user`, `username_user`, `password_user`) VALUES
('Usuario1', 'user1', 'password1'),
('Usuario2', 'user2', 'password2'),
('Usuario3', 'user3', 'password3'),
('Usuario4', 'user4', 'password4'),
('Usuario5', 'user5', 'password5'),
('Usuario6', 'user6', 'password6'),
('Usuario7', 'user7', 'password7'),
('Usuario8', 'user8', 'password8'),
('Usuario9', 'user9', 'password9'),
('Usuario10', 'user10', 'password10');



-- Insertar los tres usuarios en la tabla 'special_users'
INSERT INTO `dbRoberto`.`special_users` (`special_users_users`) VALUES
(1), -- ID del primer usuario
(2), -- ID del segundo usuario 
(3); -- ID del tercer usuario 



-- Insertar datos en la tabla 'storages'
INSERT INTO `dbRoberto`.`storages` (`storage_storage`) VALUES
(64),   -- Ejemplo para un móvil con 64 GB de almacenamiento
(128),  -- Ejemplo para un móvil con 128 GB de almacenamiento
(256),  -- Ejemplo para un móvil con 256 GB de almacenamiento
(512);  -- Ejemplo para un móvil con 512 GB de almacenamiento


-- Insertar datos en la tabla 'brands'
INSERT INTO `dbRoberto`.`brands` (`brand_brand`) VALUES
('Samsung'),
('Apple'),
('Huawei'),
('Xiaomi'),
('Sony'),
('LG'),
('Google'),
('Nokia'),
('Motorola'),
('OnePlus');



-- Insertar datos en la tabla 'cpu' para móviles
INSERT INTO `dbRoberto`.`cpu` (`name_cpu`, `nanometers_cpu`, `graphicsrender_cpu`, `manufacturer_cpu`, `cores_cpu`) VALUES
('Snapdragon 888', 5, 'Adreno 660', 'Qualcomm', 8),
('Exynos 2100', 5, 'Mali-G78 MP14', 'Samsung', 8),
('Apple A15 Bionic', 5, 'Apple GPU (4-core graphics)', 'Apple', 6),
('Kirin 9000', 5, 'Mali-G78 MP24', 'Huawei', 8),
('Dimensity 1200', 6, 'Mali-G77 MC9', 'MediaTek', 8),
('Snapdragon 870', 7, 'Adreno 650', 'Qualcomm', 8),
('Exynos 1080', 5, 'Mali-G78 MP10', 'Samsung', 8),
('Apple A14 Bionic', 5, 'Apple GPU (4-core graphics)', 'Apple', 6),
('Kirin 985', 7, 'Mali-G77 MP8', 'Huawei', 8),
('Dimensity 800U', 7, 'Mali-G57 MC3', 'MediaTek', 8),
('Snapdragon 865+', 7, 'Adreno 650', 'Qualcomm', 8),
('Exynos 980', 8, 'Mali-G76 MP5', 'Samsung', 8),
('Apple A13 Bionic', 7, 'Apple GPU (4-core graphics)', 'Apple', 6),
('Kirin 820', 7, 'Mali-G57 MC6', 'Huawei', 6),
('Dimensity 820', 7, 'Mali-G57 MC5', 'MediaTek', 8),
('Snapdragon 855+', 7, 'Adreno 640', 'Qualcomm', 8),
('Exynos 9825', 7, 'Mali-G76 MP12', 'Samsung', 8),
('Apple A12 Bionic', 7, 'Apple GPU (4-core graphics)', 'Apple', 6),
('Kirin 970', 10, 'Mali-G72 MP12', 'Huawei', 8),
('Dimensity 800', 7, 'Mali-G57 MC4', 'MediaTek', 8);



-- Insertar más datos en la tabla 'phones'
INSERT INTO `dbRoberto`.`phones` (`model_phone`, `screen_phone`, `ram_phone`, `battery_phone`, `brand_phone_brand`, `cpu_phone_cpu`, `operatingsystem_phones`) VALUES
('Samsung Galaxy S23', 6.3, 16, 4800, 1, 1, 'Android 13'),
('iPhone 15 Pro', 6.6, 10, 3700, 2, 3, 'iOS 17'),
('Huawei Mate 50', 6.5, 14, 4500, 3, 4, 'Android 12'),
('Xiaomi Redmi Note 11', 6.4, 8, 6000, 4, 5, 'MIUI 14, Android 13'),
('Sony Xperia 10 IV', 6.1, 6, 4000, 5, 6, 'Android 12'),
('LG V60 ThinQ', 6.8, 8, 5000, 6, 7, 'Android 12'),
('Google Pixel 8', 6.3, 12, 4200, 7, 8, 'Android 14'),
('Nokia 10', 6.5, 12, 5500, 8, 9, 'Android 13'),
('Motorola Edge 3', 6.7, 10, 4900, 9, 10, 'Android 13'),
('OnePlus 11', 6.9, 16, 4800, 10, 11, 'OxygenOS, Android 13'),
('Samsung Galaxy S22', 6.4, 12, 4500, 1, 1, 'Android 12'),
('iPhone 14 Pro', 6.5, 8, 3400, 2, 3, 'iOS 16'),
('Huawei P50', 6.6, 12, 4200, 3, 4, 'Android 11'),
('Xiaomi Mi 12', 6.7, 16, 5000, 4, 5, 'MIUI 13, Android 12'),
('Sony Xperia 1 III', 6.5, 12, 4500, 5, 6, 'Android 11'),
('LG G8 ThinQ', 6.1, 6, 3500, 6, 7, 'Android 11'),
('Google Pixel 7', 6.2, 8, 4000, 7, 8, 'Android 13'),
('Nokia X100', 6.67, 6, 5000, 8, 9, 'Android 12'),
('Motorola Edge 2', 6.9, 8, 4700, 9, 10, 'Android 12'),
('OnePlus 10', 6.8, 12, 4500, 10, 11, 'OxygenOS, Android 12');



-- Crear usuario 'admin' con contraseña 'dam2t'
CREATE USER IF NOT EXISTS 'admin'@'%' IDENTIFIED BY 'dam2t';

-- Asignar privilegios de administrador al usuario 'admin'
GRANT ALL PRIVILEGES ON *.* TO 'admin'@'%';

-- Crear usuario 'basic' con contraseña 'basic'
CREATE USER IF NOT EXISTS 'basic'@'%' IDENTIFIED BY 'basic';

-- Asignar privilegios de solo lectura (SELECT) al usuario 'basic'
GRANT SELECT ON *.* TO 'basic'@'%';

-- Aplicar cambios para que tengan efecto
FLUSH PRIVILEGES;





SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
